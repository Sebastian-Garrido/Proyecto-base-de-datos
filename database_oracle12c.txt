-- Generado por Oracle SQL Developer Data Modeler 24.3.1.351.0831
--   en:        2025-07-22 01:54:11 CLT
--   sitio:      Oracle Database 12c
--   tipo:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE Comanda 
    ( 
     CoNumero        INTEGER  NOT NULL , 
     CoEstado        NUMBER  NOT NULL , 
     CoHoraInicio    DATE  NOT NULL , 
     CoHoraFinal     DATE , 
     Pedido_PeNumero INTEGER  NOT NULL 
    ) 
;

ALTER TABLE Comanda 
    ADD CONSTRAINT Comanda_PK PRIMARY KEY ( CoNumero ) ;

CREATE TABLE DatoPago 
    ( 
     DaPID                 INTEGER  NOT NULL , 
     DaPCantidadAbonada    INTEGER  NOT NULL , 
     MetodoPago_MPID       INTEGER  NOT NULL , 
     DocTrib_DTNumeroOrden INTEGER  NOT NULL 
    ) 
;

ALTER TABLE DatoPago 
    ADD CONSTRAINT DatoPago_PK PRIMARY KEY ( DaPID ) ;

CREATE TABLE DetallePedido 
    ( 
     DePID             INTEGER  NOT NULL , 
     DePCantidad       INTEGER  NOT NULL , 
     DePPrecioUnitario INTEGER  NOT NULL , 
     Pedido_PeNumero   INTEGER  NOT NULL , 
     Producto_PrID     INTEGER  NOT NULL 
    ) 
;

ALTER TABLE DetallePedido 
    ADD CONSTRAINT DetallePedido_PK PRIMARY KEY ( DePID ) ;

CREATE TABLE DetalleSueldo 
    ( 
     DsID             INTEGER  NOT NULL , 
     DsFecha          DATE  NOT NULL , 
     DsSueldoPeriodo  INTEGER  NOT NULL , 
     DsPropinaPeriodo INTEGER 
    ) 
;

ALTER TABLE DetalleSueldo 
    ADD CONSTRAINT DetalleSueldo_PK PRIMARY KEY ( DsID ) ;

CREATE TABLE DocTrib 
    ( 
     DTNumeroOrden   INTEGER  NOT NULL , 
     DTFechaEmision  DATE  NOT NULL , 
     DTHoraEmision   DATE  NOT NULL , 
     DTVuelto        INTEGER , 
     DTPagoPropina   NUMBER  NOT NULL , 
     DTDescuento     INTEGER , 
     DTCompletada    NUMBER  NOT NULL , 
     DTTipo          VARCHAR2 (256 BYTE)  NOT NULL , 
     Pedido_PeNumero INTEGER  NOT NULL , 
     Trabajador_TrID INTEGER  NOT NULL , 
     Empresa_EmID    INTEGER 
    ) 
;
CREATE UNIQUE INDEX DocTrib__IDX ON DocTrib 
    ( 
     Pedido_PeNumero ASC 
    ) 
;

ALTER TABLE DocTrib 
    ADD CONSTRAINT DocTrib_PK PRIMARY KEY ( DTNumeroOrden ) ;

CREATE TABLE Empresa 
    ( 
     EmID          INTEGER  NOT NULL , 
     EmRUT         VARCHAR2 (256 BYTE)  NOT NULL , 
     EmNombre      VARCHAR2 (256 BYTE)  NOT NULL , 
     EmCorreo      VARCHAR2 (256 BYTE)  NOT NULL , 
     EmTelefono    INTEGER  NOT NULL , 
     EmRegion      VARCHAR2 (256 BYTE)  NOT NULL , 
     EmComuna      VARCHAR2 (256 BYTE)  NOT NULL , 
     EmCalle       VARCHAR2 (256 BYTE)  NOT NULL , 
     EmNumeroCalle VARCHAR2 (256 BYTE)  NOT NULL 
    ) 
;

ALTER TABLE Empresa 
    ADD CONSTRAINT Empresa_PK PRIMARY KEY ( EmID ) ;

CREATE TABLE Envasado 
    ( 
     PrID          INTEGER  NOT NULL , 
     PrNombre      VARCHAR2 (256 BYTE)  NOT NULL , 
     PrDescripcion VARCHAR2 (256 BYTE)  NOT NULL , 
     PrPrecio      INTEGER  NOT NULL , 
     PrTipo        VARCHAR2 (256 BYTE)  NOT NULL , 
     EnStock       INTEGER  NOT NULL , 
     EnMarca       VARCHAR2 (256 BYTE)  NOT NULL 
    ) 
;

ALTER TABLE Envasado 
    ADD CONSTRAINT Envasado_PK PRIMARY KEY ( PrID ) ;

CREATE TABLE FechaDetalle 
    ( 
     FeID           INTEGER  NOT NULL , 
     FeFechaIngreso DATE  NOT NULL , 
     FeFechaEgreso  DATE 
    ) 
;

ALTER TABLE FechaDetalle 
    ADD CONSTRAINT FechaDetalle_PK PRIMARY KEY ( FeID ) ;

CREATE TABLE HorasTrabajadas 
    ( 
     HoID            INTEGER  NOT NULL , 
     HoIngreso       DATE  NOT NULL , 
     HoEgreso        DATE , 
     HoFechaRegistro DATE  NOT NULL , 
     Trabajador_TrID INTEGER  NOT NULL 
    ) 
;

ALTER TABLE HorasTrabajadas 
    ADD CONSTRAINT HorasTrabajadas_PK PRIMARY KEY ( HoID ) ;

CREATE TABLE Local 
    ( 
     LoID           INTEGER  NOT NULL , 
     LoHoraApertura DATE  NOT NULL , 
     LoHoraCierre   DATE  NOT NULL , 
     LoRegion       VARCHAR2 (256 BYTE)  NOT NULL , 
     LoComuna       VARCHAR2 (256 BYTE)  NOT NULL , 
     LoCalle        VARCHAR2 (256 BYTE)  NOT NULL , 
     LoNumeroCalle  VARCHAR2 (256 BYTE)  NOT NULL , 
     LoActivo       NUMBER  NOT NULL 
    ) 
;

ALTER TABLE Local 
    ADD CONSTRAINT Local_PK PRIMARY KEY ( LoID ) ;

CREATE TABLE MesaLocal 
    ( 
     MeID            INTEGER  NOT NULL , 
     MeNumeroInterno INTEGER  NOT NULL , 
     Local_LoID      INTEGER  NOT NULL 
    ) 
;

ALTER TABLE MesaLocal 
    ADD CONSTRAINT MesaLocal_PK PRIMARY KEY ( MeID ) ;

CREATE TABLE MetodoPago 
    ( 
     MPID          INTEGER  NOT NULL , 
     MPMedioDePago VARCHAR2 (256 BYTE)  NOT NULL 
    ) 
;

ALTER TABLE MetodoPago 
    ADD CONSTRAINT MetodoPago_PK PRIMARY KEY ( MPID ) ;

CREATE TABLE Pedido 
    ( 
     PeNumero        INTEGER  NOT NULL , 
     PeFechaEmision  DATE  NOT NULL , 
     PeHoraEmision   DATE  NOT NULL , 
     MesaLocal_MeID  INTEGER  NOT NULL , 
     Local_LoID      INTEGER  NOT NULL , 
     Trabajador_TrID INTEGER  NOT NULL 
    ) 
;

ALTER TABLE Pedido 
    ADD CONSTRAINT Pedido_PK PRIMARY KEY ( PeNumero ) ;

CREATE TABLE Platillo_Preparado 
    ( 
     PrID             INTEGER  NOT NULL , 
     PrNombre         VARCHAR2 (256 BYTE)  NOT NULL , 
     PrDescripcion    VARCHAR2 (256 BYTE)  NOT NULL , 
     PrPrecio         INTEGER  NOT NULL , 
     PrTipo           VARCHAR2 (256 BYTE)  NOT NULL , 
     PPDisponibilidad NUMBER  NOT NULL 
    ) 
;

ALTER TABLE Platillo_Preparado 
    ADD CONSTRAINT Platillo_Preparado_PK PRIMARY KEY ( PrID ) ;

CREATE TABLE Producto 
    ( 
     PrID          INTEGER  NOT NULL , 
     PrNombre      VARCHAR2 (256 BYTE)  NOT NULL , 
     PrDescripcion VARCHAR2 (256 BYTE)  NOT NULL , 
     PrPrecio      INTEGER  NOT NULL , 
     PrTipo        VARCHAR2 (256 BYTE)  NOT NULL 
    ) 
;

ALTER TABLE Producto 
    ADD CONSTRAINT Producto_PK PRIMARY KEY ( PrID ) ;

CREATE TABLE Trabajador 
    ( 
     TrID                 INTEGER  NOT NULL , 
     TrRUN                INTEGER  NOT NULL , 
     TrTelefono           INTEGER , 
     TrCorreo             VARCHAR2 (256 BYTE) , 
     TrCargo              VARCHAR2 (256 BYTE)  NOT NULL , 
     TrContrase√±a         VARCHAR2 (256 BYTE) , 
     TrFechaNacimiento    DATE  NOT NULL , 
     TrSueldoHora         INTEGER  NOT NULL , 
     TrNombres            VARCHAR2 (256 BYTE)  NOT NULL , 
     TrApellidoPaterno    VARCHAR2 (256 BYTE)  NOT NULL , 
     TrApellidoMaterno    VARCHAR2 (256 BYTE)  NOT NULL , 
     TrVigente            NUMBER  NOT NULL , 
     TrRegion             VARCHAR2 (256 BYTE)  NOT NULL , 
     TrComuna             VARCHAR2 (256 BYTE)  NOT NULL , 
     TrCalle              VARCHAR2 (256 BYTE)  NOT NULL , 
     TrNumeroCalle        VARCHAR2 (256 BYTE)  NOT NULL , 
     TrDireccionAdicional VARCHAR2 (256 BYTE) , 
     Local_LoID           INTEGER  NOT NULL , 
     FechaDetalle_FeID    INTEGER  NOT NULL , 
     DetalleSueldo_DsID   INTEGER  NOT NULL 
    ) 
;

ALTER TABLE Trabajador 
    ADD CONSTRAINT Trabajador_PK PRIMARY KEY ( TrID ) ;

ALTER TABLE Comanda 
    ADD CONSTRAINT Comanda_Pedido_FK FOREIGN KEY 
    ( 
     Pedido_PeNumero
    ) 
    REFERENCES Pedido 
    ( 
     PeNumero
    ) 
;

ALTER TABLE DatoPago 
    ADD CONSTRAINT DatoPago_DocTrib_FK FOREIGN KEY 
    ( 
     DocTrib_DTNumeroOrden
    ) 
    REFERENCES DocTrib 
    ( 
     DTNumeroOrden
    ) 
;

ALTER TABLE DatoPago 
    ADD CONSTRAINT DatoPago_MetodoPago_FK FOREIGN KEY 
    ( 
     MetodoPago_MPID
    ) 
    REFERENCES MetodoPago 
    ( 
     MPID
    ) 
;

ALTER TABLE DetallePedido 
    ADD CONSTRAINT DetallePedido_Pedido_FK FOREIGN KEY 
    ( 
     Pedido_PeNumero
    ) 
    REFERENCES Pedido 
    ( 
     PeNumero
    ) 
;

ALTER TABLE DetallePedido 
    ADD CONSTRAINT DetallePedido_Producto_FK FOREIGN KEY 
    ( 
     Producto_PrID
    ) 
    REFERENCES Producto 
    ( 
     PrID
    ) 
;

ALTER TABLE DocTrib 
    ADD CONSTRAINT DocTrib_Empresa_FK FOREIGN KEY 
    ( 
     Empresa_EmID
    ) 
    REFERENCES Empresa 
    ( 
     EmID
    ) 
;

ALTER TABLE DocTrib 
    ADD CONSTRAINT DocTrib_Pedido_FK FOREIGN KEY 
    ( 
     Pedido_PeNumero
    ) 
    REFERENCES Pedido 
    ( 
     PeNumero
    ) 
;

ALTER TABLE DocTrib 
    ADD CONSTRAINT DocTrib_Trabajador_FK FOREIGN KEY 
    ( 
     Trabajador_TrID
    ) 
    REFERENCES Trabajador 
    ( 
     TrID
    ) 
;

ALTER TABLE Envasado 
    ADD CONSTRAINT Envasado_Producto_FK FOREIGN KEY 
    ( 
     PrID
    ) 
    REFERENCES Producto 
    ( 
     PrID
    ) 
;

ALTER TABLE HorasTrabajadas 
    ADD CONSTRAINT HorasTrabajadas_Trabajador_FK FOREIGN KEY 
    ( 
     Trabajador_TrID
    ) 
    REFERENCES Trabajador 
    ( 
     TrID
    ) 
;

ALTER TABLE MesaLocal 
    ADD CONSTRAINT MesaLocal_Local_FK FOREIGN KEY 
    ( 
     Local_LoID
    ) 
    REFERENCES Local 
    ( 
     LoID
    ) 
;

ALTER TABLE Pedido 
    ADD CONSTRAINT Pedido_Local_FK FOREIGN KEY 
    ( 
     Local_LoID
    ) 
    REFERENCES Local 
    ( 
     LoID
    ) 
;

ALTER TABLE Pedido 
    ADD CONSTRAINT Pedido_MesaLocal_FK FOREIGN KEY 
    ( 
     MesaLocal_MeID
    ) 
    REFERENCES MesaLocal 
    ( 
     MeID
    ) 
;

ALTER TABLE Pedido 
    ADD CONSTRAINT Pedido_Trabajador_FK FOREIGN KEY 
    ( 
     Trabajador_TrID
    ) 
    REFERENCES Trabajador 
    ( 
     TrID
    ) 
;

ALTER TABLE Platillo_Preparado 
    ADD CONSTRAINT Platillo_Preparado_Producto_FK FOREIGN KEY 
    ( 
     PrID
    ) 
    REFERENCES Producto 
    ( 
     PrID
    ) 
;

ALTER TABLE Trabajador 
    ADD CONSTRAINT Trabajador_DetalleSueldo_FK FOREIGN KEY 
    ( 
     DetalleSueldo_DsID
    ) 
    REFERENCES DetalleSueldo 
    ( 
     DsID
    ) 
;

ALTER TABLE Trabajador 
    ADD CONSTRAINT Trabajador_FechaDetalle_FK FOREIGN KEY 
    ( 
     FechaDetalle_FeID
    ) 
    REFERENCES FechaDetalle 
    ( 
     FeID
    ) 
;

ALTER TABLE Trabajador 
    ADD CONSTRAINT Trabajador_Local_FK FOREIGN KEY 
    ( 
     Local_LoID
    ) 
    REFERENCES Local 
    ( 
     LoID
    ) 
;

CREATE OR REPLACE TRIGGER ARC_FKArc_4_Envasado 
BEFORE INSERT OR UPDATE OF PrID 
ON Envasado 
FOR EACH ROW 
DECLARE 
    d VARCHAR2 (256 BYTE); 
BEGIN 
    SELECT A.PrTipo INTO d 
    FROM Producto A 
    WHERE A.PrID = :new.PrID; 
    IF (d IS NULL OR d <> 'Envasado') THEN 
        raise_application_error(-20223,'FK Envasado_Producto_FK in Table Envasado violates Arc constraint on Table Producto - discriminator column PrTipo doesn''t have value ''Envasado'''); 
    END IF; 
    EXCEPTION 
    WHEN NO_DATA_FOUND THEN 
        NULL; 
    WHEN OTHERS THEN 
        RAISE; 
END; 
/

CREATE OR REPLACE TRIGGER ARC_FKArc_4_Platillo_Preparado 
BEFORE INSERT OR UPDATE OF PrID 
ON Platillo_Preparado 
FOR EACH ROW 
DECLARE 
    d VARCHAR2 (256 BYTE); 
BEGIN 
    SELECT A.PrTipo INTO d 
    FROM Producto A 
    WHERE A.PrID = :new.PrID; 
    IF (d IS NULL OR d <> 'Preparado') THEN 
        raise_application_error(-20223,'FK Platillo_Preparado_Producto_FK in Table Platillo_Preparado violates Arc constraint on Table Producto - discriminator column PrTipo doesn''t have value ''Preparado'''); 
    END IF; 
    EXCEPTION 
    WHEN NO_DATA_FOUND THEN 
        NULL; 
    WHEN OTHERS THEN 
        RAISE; 
END; 
/

CREATE SEQUENCE Comanda_CoNumero_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER Comanda_CoNumero_TRG 
BEFORE INSERT ON Comanda 
FOR EACH ROW 
WHEN (NEW.CoNumero IS NULL) 
BEGIN 
    :NEW.CoNumero := Comanda_CoNumero_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE DatoPago_DaPID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER DatoPago_DaPID_TRG 
BEFORE INSERT ON DatoPago 
FOR EACH ROW 
WHEN (NEW.DaPID IS NULL) 
BEGIN 
    :NEW.DaPID := DatoPago_DaPID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE DetallePedido_DePID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER DetallePedido_DePID_TRG 
BEFORE INSERT ON DetallePedido 
FOR EACH ROW 
WHEN (NEW.DePID IS NULL) 
BEGIN 
    :NEW.DePID := DetallePedido_DePID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE DetalleSueldo_DsID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER DetalleSueldo_DsID_TRG 
BEFORE INSERT ON DetalleSueldo 
FOR EACH ROW 
WHEN (NEW.DsID IS NULL) 
BEGIN 
    :NEW.DsID := DetalleSueldo_DsID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE DocTrib_DTNumeroOrden_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER DocTrib_DTNumeroOrden_TRG 
BEFORE INSERT ON DocTrib 
FOR EACH ROW 
WHEN (NEW.DTNumeroOrden IS NULL) 
BEGIN 
    :NEW.DTNumeroOrden := DocTrib_DTNumeroOrden_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE Empresa_EmID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER Empresa_EmID_TRG 
BEFORE INSERT ON Empresa 
FOR EACH ROW 
WHEN (NEW.EmID IS NULL) 
BEGIN 
    :NEW.EmID := Empresa_EmID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE FechaDetalle_FeID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER FechaDetalle_FeID_TRG 
BEFORE INSERT ON FechaDetalle 
FOR EACH ROW 
WHEN (NEW.FeID IS NULL) 
BEGIN 
    :NEW.FeID := FechaDetalle_FeID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE HorasTrabajadas_HoID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER HorasTrabajadas_HoID_TRG 
BEFORE INSERT ON HorasTrabajadas 
FOR EACH ROW 
WHEN (NEW.HoID IS NULL) 
BEGIN 
    :NEW.HoID := HorasTrabajadas_HoID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE Local_LoID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER Local_LoID_TRG 
BEFORE INSERT ON Local 
FOR EACH ROW 
WHEN (NEW.LoID IS NULL) 
BEGIN 
    :NEW.LoID := Local_LoID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE MesaLocal_MeID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER MesaLocal_MeID_TRG 
BEFORE INSERT ON MesaLocal 
FOR EACH ROW 
WHEN (NEW.MeID IS NULL) 
BEGIN 
    :NEW.MeID := MesaLocal_MeID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE MetodoPago_MPID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER MetodoPago_MPID_TRG 
BEFORE INSERT ON MetodoPago 
FOR EACH ROW 
WHEN (NEW.MPID IS NULL) 
BEGIN 
    :NEW.MPID := MetodoPago_MPID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE Pedido_PeNumero_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER Pedido_PeNumero_TRG 
BEFORE INSERT ON Pedido 
FOR EACH ROW 
WHEN (NEW.PeNumero IS NULL) 
BEGIN 
    :NEW.PeNumero := Pedido_PeNumero_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE Producto_PrID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER Producto_PrID_TRG 
BEFORE INSERT ON Producto 
FOR EACH ROW 
WHEN (NEW.PrID IS NULL) 
BEGIN 
    :NEW.PrID := Producto_PrID_SEQ.NEXTVAL; 
END;
/

CREATE SEQUENCE Trabajador_TrID_SEQ 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER Trabajador_TrID_TRG 
BEFORE INSERT ON Trabajador 
FOR EACH ROW 
WHEN (NEW.TrID IS NULL) 
BEGIN 
    :NEW.TrID := Trabajador_TrID_SEQ.NEXTVAL; 
END;
/



-- Informe de Resumen de Oracle SQL Developer Data Modeler: 
-- 
-- CREATE TABLE                            16
-- CREATE INDEX                             1
-- ALTER TABLE                             34
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          16
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         14
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
